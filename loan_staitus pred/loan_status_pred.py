# -*- coding: utf-8 -*-
"""loan_status_pred.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1egYJDCsgDOJj6zuiJ0ZP5KeltSWBDXxX
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

from sklearn import svm

from sklearn.metrics import accuracy_score

loan_dataset = pd.read_csv('loan.csv')

loan_dataset.head()

loan_dataset.shape

loan_dataset.info()

loan_dataset.describe()

loan_dataset.isnull().sum()

loan_dataset = loan_dataset.dropna()

loan_dataset['Loan_Status'] = loan_dataset['Loan_Status'].replace({'N':0,'Y':1})

loan_dataset['Dependents'].value_counts()

loan_dataset = loan_dataset.replace(to_replace='3+', value=4)

sns.countplot(x='Education',hue='Loan_Status',data=loan_dataset)

# marital status & Loan Status
sns.countplot(x='Married',hue='Loan_Status',data=loan_dataset)

# convert categorical columns to numerical values
loan_dataset.replace({'Married':{'No':0,'Yes':1},'Gender':{'Male':1,'Female':0},'Self_Employed':{'No':0,'Yes':1},
                      'Property_Area':{'Rural':0,'Semiurban':1,'Urban':2},'Education':{'Graduate':1,'Not Graduate':0}},inplace=True)

# separating the data and label
X = loan_dataset.drop(columns=['Loan_ID','Loan_Status'],axis=1)
Y = loan_dataset['Loan_Status']

print(X.head())
print(Y.head())

X_train, X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.1,stratify=Y,random_state=2)

classifier = svm.SVC(kernel='linear')

classifier.fit(X_train,Y_train)

X_train_prediction = classifier.predict(X_train)
training_data_accuray = accuracy_score(X_train_prediction,Y_train)
print('Accuracy on training data : ', training_data_accuray)

X_test_prediction = classifier.predict(X_test)
test_data_accuray = accuracy_score(X_test_prediction,Y_test)
print('Accuracy on test data : ', test_data_accuray)

import numpy as np

def loan_approval_prediction(input_data):
    # Convert input data to a NumPy array and reshape for a single instance
    input_data_as_array = np.array(input_data).reshape(1, -1)

    # Make a prediction using the trained model
    prediction = classifier.predict(input_data_as_array)

    # Generate a human-like response
    if prediction[0] == 1:
        response = (
            "üéâ Congratulations! Your loan application has been **approved!** üéä\n"
            "You meet the necessary eligibility criteria, and the bank is willing to proceed with your loan.\n"
            "Our team will contact you soon to finalize the paperwork. ‚úÖ"
        )
    else:
        response = (
            "‚ö†Ô∏è Unfortunately, your loan application has been **rejected.** ‚ùå\n"
            "Based on our evaluation, you might need to improve certain financial aspects, such as:\n"
            "‚Ä¢ Increasing your income\n"
            "‚Ä¢ Improving your credit history\n"
            "‚Ä¢ Reducing your current debt obligations\n"
            "We encourage you to work on these areas and reapply in the future. üí°"
        )

    # Print the response
    print(response)

# Example input (Change these values as needed)
example_input = [1, 0, 0, 1, 4, 5000, 2000, 150, 360, 1, 2]  # Example loan application data

# Call the function to make a prediction
loan_approval_prediction(example_input)

