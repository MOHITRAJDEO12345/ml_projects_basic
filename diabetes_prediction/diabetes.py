# -*- coding: utf-8 -*-
"""diabetes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1egYJDCsgDOJj6zuiJ0ZP5KeltSWBDXxX
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

diabetes_data = pd.read_csv('diabetes_prediction\diabetes.csv')

diabetes_data.head()

diabetes_data.groupby('Outcome').mean()

diabetes_data.describe()

diabetes_data['Outcome'].value_counts()

X = diabetes_data.drop(columns = 'Outcome', axis=1)
Y = diabetes_data['Outcome']

scalar = StandardScaler()

scalar.fit(X)

standardised_data = scalar.transform(X)

X = standardised_data
Y = diabetes_data['Outcome']

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

Classifier = svm.SVC(kernel='linear')

Classifier.fit(X_train, Y_train)

X_train_prediction = Classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

X_test_prediction = Classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the test data : ', test_data_accuracy)

import numpy as np

# Assuming you have your trained model stored in the variable 'Classifier'
# and your StandardScaler in 'scalar'

def predict_diabetes(input_data):
  """Predicts diabetes based on input data and prints the result.

  Args:
    input_data: A NumPy array representing the input features.
  """
  column_names = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age']
  input_df = pd.DataFrame([input_data], columns=column_names)
  # Reshape the input data if necessary (e.g., if it's a single sample)
  input_data = input_data.reshape(1, -1)

  # Standardize the input data using the fitted scaler
  standardized_input = scalar.transform(input_data)

  # Make the prediction
  prediction = Classifier.predict(standardized_input)[0]

  # Print the result
  if prediction == 1:
    print("Prediction: Diabetic")
  else:
    print("Prediction: Non-Diabetic")

# Example usage:
input_data = np.array([6, 148, 72, 35, 0, 33.6, 0.627, 50]) # Example input values
predict_diabetes(input_data)

