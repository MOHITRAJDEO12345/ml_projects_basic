# -*- coding: utf-8 -*-
"""fake_news.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1egYJDCsgDOJj6zuiJ0ZP5KeltSWBDXxX
"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report

import nltk
nltk.download('stopwords')

print(stopwords.words('english'))

news_dataset = pd.read_csv('train.csv')

news_dataset.shape

news_dataset.info()

news_dataset.isnull().sum()

news_dataset = news_dataset.fillna('')

#merging all 3
news_dataset['content'] = news_dataset['author']+' '+news_dataset['title']

news_dataset.head()

X = news_dataset.drop(columns='label', axis=1)
Y = news_dataset['label']

port_stem = PorterStemmer()

def stemming(content):
    stemmed_content = re.sub('[^a-zA-Z]',' ',content)
    stemmed_content = stemmed_content.lower()
    stemmed_content = stemmed_content.split()
    stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
    stemmed_content = ' '.join(stemmed_content)
    return stemmed_content

news_dataset['content'] = news_dataset['content'].apply(stemming)

print(news_dataset['content'])

X = news_dataset['content'].values
Y = news_dataset['label'].values

print(X)

print(Y)

print(Y.shape)

from sklearn.feature_extraction.text import TfidfVectorizer # Importing the necessary class

vectorizer = TfidfVectorizer()
vectorizer.fit(X)

X = vectorizer.transform(X)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify=Y, random_state=2)

model = MultinomialNB()
model.fit(X_train, Y_train)

x_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(x_train_prediction, Y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

Y_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test_prediction, Y_test)

# Create a DataFrame to store results
test_results = pd.DataFrame({'Actual': Y_test, 'Predicted': Y_test_predicted})

# Check if predictions are correct
test_results['Correct'] = test_results['Actual'] == test_results['Predicted']

# Print results with ✅ or ❌
for index, row in test_results.head(20).iterrows():  # Show first 20 rows
    status = "✅ Correct" if row['Correct'] else "❌ Incorrect"
    print(f"Row {index}: Actual={row['Actual']}, Predicted={row['Predicted']} → {status}")

print('Accuracy score of the test data : ', test_data_accuracy)

