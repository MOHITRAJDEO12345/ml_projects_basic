# -*- coding: utf-8 -*-
"""loan_status_pred.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1egYJDCsgDOJj6zuiJ0ZP5KeltSWBDXxX
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

wine_data = pd.read_csv('wine prediction\winequality-red.csv')

wine_data.head()

wine_data.info()

wine_data.describe()

wine_data['quality'].value_counts()

wine_dataset = wine_data

sns.catplot(x='quality', data = wine_dataset, kind = 'count')

plot = plt.figure(figsize=(5,6))
sns.barplot(x='quality', y = 'volatile acidity', data = wine_dataset)

plot = plt.figure(figsize=(5,6))
sns.barplot(x='quality', y = 'citric acid', data = wine_dataset)

correlation = wine_dataset.corr()

plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt = '.1f', annot = True, annot_kws={'size':8}, cmap = 'Reds')

X = wine_dataset.drop('quality',axis=1)
#we want high quality
Y = wine_dataset['quality'].apply(lambda y_value: 1 if y_value>=7 else 0)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=3)

model = RandomForestClassifier()

model.fit(X_train, Y_train)

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print('Accuracy : ', test_data_accuracy)

# accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print('Accuracy on training data : ', training_data_accuracy)

input_data = (11.5,0.5,0.36,0.1,0.071,17.0,102.0,0.9978,3.35,0.8,10.5)

# changing the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the data as we are predicting the label for only one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]==1):
  print('Good Quality Wine')
else:
  print('Bad Quality Wine')

